{"version":3,"sources":["classes/Direction.ts","classes/constants.ts","classes/Log.ts","classes/utils.ts","classes/CellModel.ts","classes/Game.ts","classes/Coords.ts","components/Cell.tsx","components/Row.tsx","components/Menu.tsx","App.tsx","components/Board.tsx","serviceWorker.ts","index.tsx"],"names":["Direction","dissectDirection","d","isRight","Right","isLeft","Left","isDown","Down","isUp","Up","isDiagonal","isHorizontal","isVertical","directionToString","dir","coordsToString","c","coordToString","x","y","Array","isArray","map","join","LogLevel","log","MIN_LEVEL","Debug","label","console","groupCollapsed","groupEnd","message","this","Verbose","optionalParams","debug","None","Info","info","Warning","warn","error","setLogLevel","level","initialCellCoords","coords","directions","concat","fill","forEach","push","isRtl","isLtr","isUtd","isDtu","directionsOverlap","d1","d2","dir1","dir2","getClassNamesForLineDirections","length","a","group","direction","JSON","stringify","s","v","getNextCoords","sumUntilNotZero","sumToAdd","grid","xs","ys","startX","Math","min","endX","max","startY","endY","i","j","some","CellModel","isOpened","lineDirections","prototype","toString","decorate","observable","Game","lines","selectedCellCoords","cells","initiateBoard","then","autorun","cell","cellAt","ld","getPossibleLines","l","reduce","prev","curr","rows","slice","sort","b","row","find","r","yIndex","game","coord","Promise","setTimeout","ll","possibleLines","lineLength","unopenedCells","lineCoords","next","Line","c2","c1","line","getLineForCoords","lineCount","undefined","w","origo","GameState","getDirectionForCoords","highlightedCoords","computed","endOfLineCoords","isCellSelected","props","makeStyle","isSelected","isHighlighted","isEndOfLine","width","height","fontSize","textAlign","backgroundColor","Cell","observer","className","style","onClick","tryCompleteLine","data-coords","Row","key","Menu","colSpan","Error","Log","minLevel","loadGame","linesJson","gameWrapper","localStorage","setItem","saveGame","BOARD_MATRIX_SIZE","margin","Board","React","useEffect","cellSpacing","GameWrapper","getItem","parse","splice","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.43637656.chunk.js","sourcesContent":["import Coords from \"./Coords\";\r\n\r\nexport enum Direction {\r\n  None = 0,\r\n  Right = 1 << 0,\r\n  Left = 1 << 1,\r\n  Down = 1 << 2,\r\n  Up = 1 << 3,\r\n}\r\n\r\nexport function dissectDirection(d: Direction) {\r\n  const [isRight, isLeft, isDown, isUp] = [\r\n    (d & Direction.Right) === Direction.Right,\r\n    (d & Direction.Left) === Direction.Left,\r\n    (d & Direction.Down) === Direction.Down,\r\n    (d & Direction.Up) === Direction.Up,\r\n  ];\r\n  return {\r\n    isRight,\r\n    isLeft,\r\n    isDown,\r\n    isUp,\r\n    isDiagonal: (isUp || isDown) && (isRight || isLeft),\r\n    isHorizontal: (isRight || isLeft) && !(isUp || isDown),\r\n    isVertical: (isUp || isDown) && !(isRight || isLeft),\r\n  };\r\n}\r\n\r\nexport function directionToString(d: Direction) {\r\n  const dir = dissectDirection(d);\r\n  return (\r\n    (dir.isUp ? \"up\" : \"\") +\r\n    (dir.isDown ? \"down\" : \"\") +\r\n    (dir.isRight ? \"right\" : \"\") +\r\n    (dir.isLeft ? \"left\" : \"\")\r\n  );\r\n}\r\n\r\nexport function coordsToString(c: Coords | Coords[]): String {\r\n  const coordToString = (c: Coords) => {\r\n    return `(${c.x}, ${c.y})`;\r\n  };\r\n  return Array.isArray(c)\r\n    ? `[${c.map(coordToString).join(\", \")}]`\r\n    : coordToString(c);\r\n}\r\n\r\nexport function allDirections(): Direction[] {\r\n  return [\r\n    Direction.Up,\r\n    Direction.Down,\r\n    Direction.Left,\r\n    Direction.Right,\r\n    Direction.Up | Direction.Left,\r\n    Direction.Up | Direction.Right,\r\n    Direction.Down | Direction.Left,\r\n    Direction.Down | Direction.Right,\r\n  ];\r\n}\r\n","export const BOARD_MATRIX_SIZE = 20;\r\nexport const CELL_SIZE = 24;\r\nexport const LOCALSTORAGE_STATE_KEY = \"game_lines\";\r\n","import { decorate, computed, observable } from \"mobx\";\r\n\r\nexport enum LogLevel {\r\n  None = 0,\r\n  Verbose,\r\n  Debug,\r\n  Info,\r\n  Warning,\r\n  Error,\r\n}\r\n\r\nclass Log {\r\n  MIN_LEVEL = LogLevel.Debug;\r\n\r\n  get minLevel(): String {\r\n    return LogLevel[this.MIN_LEVEL];\r\n  }\r\n  group(label: String) {\r\n    console.groupCollapsed(label);\r\n  }\r\n  groupEnd() {\r\n    console.groupEnd();\r\n  }\r\n  v(message?: any, ...optionalParams: any[]) {\r\n    if (this.MIN_LEVEL == LogLevel.Verbose) {\r\n      console.debug(message, ...optionalParams);\r\n    }\r\n  }\r\n  d(message?: any, ...optionalParams: any[]) {\r\n    if (this.MIN_LEVEL !== LogLevel.None && this.MIN_LEVEL <= LogLevel.Debug) {\r\n      console.debug(message, ...optionalParams);\r\n    }\r\n  }\r\n  i(message?: any, ...optionalParams: any[]) {\r\n    if (this.MIN_LEVEL !== LogLevel.None && this.MIN_LEVEL <= LogLevel.Info)\r\n      console.info(message, ...optionalParams);\r\n  }\r\n  w(message?: any, ...optionalParams: any[]) {\r\n    if (this.MIN_LEVEL !== LogLevel.None && this.MIN_LEVEL <= LogLevel.Warning)\r\n      console.warn(message, ...optionalParams);\r\n  }\r\n  e(message?: any, ...optionalParams: any[]) {\r\n    if (this.MIN_LEVEL !== LogLevel.None)\r\n      console.error(message, ...optionalParams);\r\n  }\r\n}\r\n\r\nconst log = new Log();\r\n\r\nexport function decreaseLogLevel() {\r\n  if (log.MIN_LEVEL - 1 === -1) log.MIN_LEVEL = LogLevel.Error;\r\n  else log.MIN_LEVEL--;\r\n}\r\n\r\nexport function setLogLevel(level: LogLevel) {\r\n  log.MIN_LEVEL = level;\r\n}\r\n\r\nexport default log;\r\n","import {\r\n  Direction,\r\n  dissectDirection,\r\n  coordsToString,\r\n  directionToString,\r\n} from \"./Direction\";\r\nimport Coords from \"./Coords\";\r\nimport { BOARD_MATRIX_SIZE } from \"./constants\";\r\nimport log from \"./Log\";\r\n\r\nexport const initialCellCoords: Array<Coords> = (() => {\r\n  const coords = Array<Coords>();\r\n  const directions: Array<Direction> = Array().concat(\r\n    Array(3).fill(Direction.Right),\r\n    Array(3).fill(Direction.Down),\r\n    Array(3).fill(Direction.Right),\r\n    Array(3).fill(Direction.Down),\r\n    Array(3).fill(Direction.Left),\r\n    Array(3).fill(Direction.Down),\r\n    Array(3).fill(Direction.Left),\r\n    Array(3).fill(Direction.Up),\r\n    Array(3).fill(Direction.Left),\r\n    Array(3).fill(Direction.Up),\r\n    Array(3).fill(Direction.Right),\r\n    Array(3).fill(Direction.Up)\r\n  );\r\n  let x = -2;\r\n  let y = -5;\r\n  directions.forEach((d) => {\r\n    coords.push({ x, y });\r\n    const {\r\n      isLeft: isRtl,\r\n      isRight: isLtr,\r\n      isDown: isUtd,\r\n      isUp: isDtu,\r\n    } = dissectDirection(d);\r\n    x = isLtr\r\n      ? x + 1 === 0\r\n        ? 1\r\n        : x + 1\r\n      : isRtl\r\n      ? x - 1 === 0\r\n        ? -1\r\n        : x - 1\r\n      : x;\r\n    y = isUtd\r\n      ? y + 1 === 0\r\n        ? 1\r\n        : y + 1\r\n      : isDtu\r\n      ? y - 1 === 0\r\n        ? -1\r\n        : y - 1\r\n      : y;\r\n  });\r\n  return coords;\r\n})();\r\n\r\nexport function getDirectionForCoords(c1: Coords, c2: Coords) {\r\n  let d = Direction.None;\r\n  if (c1.x < c2.x) d |= Direction.Right;\r\n  else if (c1.x > c2.x) d |= Direction.Left;\r\n  if (c1.y < c2.y) d |= Direction.Up;\r\n  else if (c1.y > c2.y) d |= Direction.Down;\r\n  return d;\r\n}\r\n\r\nexport function directionsOverlap(d1: Direction, d2: Direction): boolean {\r\n  if (d1 === d2) return true;\r\n  const [dir1, dir2] = [dissectDirection(d1), dissectDirection(d2)];\r\n  // Vertical line\r\n  return dir1.isVertical && dir2.isVertical // Vertical: \"|\"\r\n    ? true\r\n    : dir1.isHorizontal && dir2.isHorizontal // Horizontal: \"-\"\r\n    ? true\r\n    : dir1.isRight && dir1.isUp && dir2.isLeft && dir2.isDown // Diagonal 1: \"/\"\r\n    ? true\r\n    : dir2.isRight && dir2.isUp && dir1.isLeft && dir1.isDown // Diagonal 1 with reversed comparison\r\n    ? true\r\n    : dir1.isLeft && dir1.isUp && dir2.isRight && dir2.isDown // Diagonal 2: \"\\\"\r\n    ? true\r\n    : dir2.isLeft && dir2.isUp && dir1.isRight && dir1.isDown // Diagonal 2 with reversed comparison\r\n    ? true\r\n    : false;\r\n}\r\n\r\nexport function getClassNamesForLineDirections(\r\n  directions: Direction[]\r\n): String {\r\n  if (!Array.isArray(directions) || directions.length === 0) return \"\";\r\n  const a = Array<String>();\r\n  log.group(\"getClassNamesForLineDirections\");\r\n  for (const direction of directions) {\r\n    const d = dissectDirection(direction);\r\n    log.d(\r\n      \"Direction %s (%s): %s\",\r\n      direction,\r\n      directionToString(direction),\r\n      JSON.stringify(d)\r\n    );\r\n    if ((d.isUp && d.isRight) || (d.isDown && d.isLeft))\r\n      a.push(\"line-right-up\");\r\n    if ((d.isDown && d.isRight) || (d.isUp && d.isLeft))\r\n      a.push(\"line-right-down\");\r\n    if ((d.isUp || d.isDown) && !d.isRight && !d.isLeft)\r\n      a.push(\"line-vertical\");\r\n    if ((d.isRight || d.isLeft) && !d.isUp && !d.isDown)\r\n      a.push(\"line-horizontal\");\r\n  }\r\n  const s = a.join(\" \");\r\n  log.v(\r\n    `Directions [${directions\r\n      .map(directionToString)\r\n      .join(\", \")}] resulted in className=%s`,\r\n    s\r\n  );\r\n  log.groupEnd();\r\n\r\n  return s;\r\n}\r\n\r\nexport function getNextCoords(coords: Coords, direction: Direction): Coords {\r\n  const d = dissectDirection(direction);\r\n  let { x, y } = coords;\r\n  if (d.isUp) y = sumUntilNotZero(y, 1);\r\n  if (d.isDown) y = sumUntilNotZero(y, -1);\r\n  if (d.isRight) x = sumUntilNotZero(x, 1);\r\n  if (d.isLeft) x = sumUntilNotZero(x, -1);\r\n  // log.d(\r\n  //   \"Next coords from %s in direction %s is at %s\",\r\n  //   coordsToString(coords),\r\n  //   directionToString(direction),\r\n  //   coordsToString({ x, y })\r\n  // );\r\n  return { x, y };\r\n}\r\n\r\nexport function sumUntilNotZero(a: number, sumToAdd: number): number {\r\n  return a + sumToAdd === 0\r\n    ? sumUntilNotZero(a + sumToAdd, sumToAdd)\r\n    : a + sumToAdd;\r\n}\r\n\r\nexport const initialGameGrid = ((): Array<Coords> => {\r\n  const grid = [...initialCellCoords];\r\n  const padding = (BOARD_MATRIX_SIZE - 10) / 2;\r\n  const xs = grid.map(({ x, y }) => x);\r\n  const ys = grid.map(({ x, y }) => y);\r\n  const [startX, endX, startY, endY] = [\r\n    Math.min(...xs) - padding,\r\n    Math.max(...xs) + padding,\r\n    Math.min(...ys) - padding,\r\n    Math.max(...ys) + padding,\r\n  ];\r\n  console.debug(\r\n    \"Creating a matrix from [%o, %o] to [%o, %o]\",\r\n    startX,\r\n    startY,\r\n    endX,\r\n    endY\r\n  );\r\n  for (let i = startX; i < endX; i++)\r\n    for (let j = startY; j < endY; j++)\r\n      if (!grid.some(({ x, y }) => x === i && y === j))\r\n        grid.push({ x: i, y: j });\r\n  return grid;\r\n})();\r\n","import { decorate, observable } from \"mobx\";\r\nimport Coords from \"./Coords\";\r\nimport { Direction, coordsToString, directionToString } from \"./Direction\";\r\n\r\nclass CellModel {\r\n  isOpened = false;\r\n  readonly lineDirections = Array<Direction>();\r\n  constructor(public readonly coords: Coords) {}\r\n}\r\n\r\nCellModel.prototype.toString = function (): string {\r\n  return `${this.isOpened ? \"Opened\" : \"Closed\"} cell ${coordsToString(\r\n    this.coords\r\n  )} (dir=${this.lineDirections.map((d) => directionToString(d)).join(\", \")})`;\r\n};\r\n\r\ndecorate(CellModel, {\r\n  isOpened: observable,\r\n  lineDirections: observable,\r\n});\r\n\r\nexport default CellModel;\r\n","import {\r\n  initialCellCoords,\r\n  getDirectionForCoords,\r\n  getNextCoords,\r\n  sumUntilNotZero,\r\n  directionsOverlap,\r\n} from \"./utils\";\r\nimport Coords, { areCoordsEqual as coordsAreEqual } from \"./Coords\";\r\nimport { RowProps } from \"../components/Row\";\r\nimport { decorate, observable, computed, autorun } from \"mobx\";\r\nimport {\r\n  allDirections,\r\n  Direction,\r\n  coordsToString,\r\n  directionToString,\r\n} from \"./Direction\";\r\nimport CellModel from \"./CellModel\";\r\nimport log, { LogLevel, decreaseLogLevel, setLogLevel } from \"../classes/Log\";\r\n\r\nclass Game {\r\n  static readonly origo = { x: 0, y: 0 };\r\n  readonly lines = Array<Line>();\r\n  selectedCellCoords: Coords | undefined;\r\n  readonly cells = Array<CellModel>();\r\n  get highlightedCoords(): Array<Coords> {\r\n    if (!this.selectedCellCoords) return [];\r\n    else\r\n      return this.getPossibleLines(this.selectedCellCoords)\r\n        .map((l) => l.coords)\r\n        .reduce((prev, curr) => prev.concat(curr), []);\r\n  }\r\n  get lineCount(): number {\r\n    return this.lines?.length || 0;\r\n  }\r\n  get endOfLineCoords(): Array<Coords> {\r\n    if (!this.selectedCellCoords) return [];\r\n    else\r\n      return this.getPossibleLines(this.selectedCellCoords).map(\r\n        (l) => l.coords[l.coords.length - 1]\r\n      );\r\n  }\r\n  get rows() {\r\n    const rows = Array<RowProps>();\r\n    this.cells\r\n      .slice() // MobX\r\n      .sort((a, b) => a.coords.x - b.coords.x)\r\n      .slice()\r\n      .sort((a, b) => b.coords.y - a.coords.y) // Note: because Y axis decreases downwards, reverse this sorting.\r\n      .forEach((c) => {\r\n        const { y } = c.coords;\r\n        const row = rows.find((r) => r.yIndex === y);\r\n        if (!row) rows.push({ yIndex: y, cells: [c], game: this });\r\n        else row.cells.push(c);\r\n      });\r\n    return rows;\r\n  }\r\n  constructor() {\r\n    for (let y = 9; y >= -9; y = sumUntilNotZero(y, -1))\r\n      for (let x = -9; x <= 9; x = sumUntilNotZero(x, 1))\r\n        this.cells.push(new CellModel({ x, y }));\r\n\r\n    this.initiateBoard().then(() => {\r\n      autorun(() => {\r\n        // As {this.lines} is a MobX observable,\r\n        // * this will run each times the collection is updated.\r\n        this.lines.forEach(({ coords, direction }) => {\r\n          coords.forEach(({ x, y }) => {\r\n            const cell = this.cellAt(x, y)!;\r\n            if (!cell.isOpened) cell.isOpened = true;\r\n            if (!cell.lineDirections.some((ld) => ld === direction)) {\r\n              cell.lineDirections.push(direction);\r\n              log.d(\r\n                \"Added direction (%o) to cell at %o\",\r\n                directionToString(direction),\r\n                coordsToString(cell!.coords)\r\n              );\r\n            }\r\n          });\r\n        });\r\n      });\r\n    });\r\n  }\r\n  async initiateBoard() {\r\n    for (const coord of initialCellCoords) {\r\n      await new Promise((r: any) =>\r\n        setTimeout(() => {\r\n          this.cellAt(coord.x, coord.y)!.isOpened = true;\r\n          r(true);\r\n        }, 8)\r\n      );\r\n    }\r\n  }\r\n  cellAt(x: number, y: number): CellModel | undefined {\r\n    return this.cells.find((c) => c.coords.x === x && c.coords.y === y);\r\n  }\r\n  getPossibleLines(coords: Coords): Line[] {\r\n    const ll = log.MIN_LEVEL;\r\n    if (ll < LogLevel.Info) setLogLevel(LogLevel.Info); // skip debug logs for a while\r\n    const possibleLines = Array<Line>();\r\n    for (const direction of allDirections()) {\r\n      let { x, y } = coords;\r\n      let lineLength = 0;\r\n      let unopenedCells = 0;\r\n      let lineCoords = Array<Coords>();\r\n      for (let i = 0; i < 5; i++) {\r\n        lineCoords.push({ x, y });\r\n        const cell = this.cellAt(x, y);\r\n        if (!cell?.isOpened) unopenedCells++;\r\n        if (\r\n          !cell?.lineDirections?.some(\r\n            (ld) => ld === direction || directionsOverlap(ld, direction)\r\n          )\r\n        ) {\r\n          lineLength++;\r\n        }\r\n\r\n        let next = getNextCoords({ x, y }, direction);\r\n        x = next.x;\r\n        y = next.y;\r\n      }\r\n      if (lineLength === 5 && unopenedCells <= 1) {\r\n        const l = new Line(lineCoords);\r\n        log.i(\r\n          \"Possible line from coords %s to direction %s: %s\",\r\n          coordsToString(coords),\r\n          directionToString(direction),\r\n          coordsToString(lineCoords)\r\n        );\r\n        possibleLines.push(l);\r\n      }\r\n    }\r\n    setLogLevel(ll);\r\n    return possibleLines;\r\n  }\r\n  tryCompleteLine(c2: Coords) {\r\n    const c1 = this.selectedCellCoords;\r\n    if (!c1) {\r\n      log.w(\"Could not complete line due to selected coords being falsy.\");\r\n      return;\r\n    } else {\r\n      log.i(\r\n        \"Attempting to complete line from %o to %o\",\r\n        coordsToString(c1),\r\n        coordsToString(c2)\r\n      );\r\n      const line = this.getLineForCoords(c1, c2)!;\r\n      for (const { x, y } of line.coords) {\r\n        const c = this.cellAt(x, y);\r\n        if (!c!.isOpened) {\r\n          c!.isOpened = true;\r\n          log.i(\"Opened cell at \", coordsToString(c!.coords));\r\n        }\r\n      }\r\n      this.lines.push(line);\r\n      log.d(\r\n        \"Added line at %s. Line count: %o.\",\r\n        coordsToString(line.coords),\r\n        this.lineCount\r\n      );\r\n      this.selectedCellCoords = undefined;\r\n      log.d(\"Reset selected cell coords.\");\r\n    }\r\n  }\r\n  getLineForCoords(c1: Coords, c2: Coords): Line | undefined {\r\n    return this.getPossibleLines(c1).find((l) =>\r\n      l.coords.some((c) => coordsAreEqual(c, c2))\r\n    );\r\n  }\r\n}\r\n\r\nexport class Line {\r\n  get direction(): Direction {\r\n    const d = getDirectionForCoords(this.coords[0], this.coords[1]);\r\n    if (d === Direction.None)\r\n      log.w(\r\n        \"Coords %o resulted in a 0-direction.\",\r\n        coordsToString([this.coords[0], this.coords[1]])\r\n      );\r\n    return d;\r\n  }\r\n  constructor(public coords: Coords[]) {}\r\n}\r\n\r\nexport enum GameState {\r\n  NotStarted = 0,\r\n  Started,\r\n  Finished,\r\n}\r\n\r\ndecorate(Game, {\r\n  selectedCellCoords: observable,\r\n  highlightedCoords: computed,\r\n  endOfLineCoords: computed,\r\n  lines: observable,\r\n  rows: computed,\r\n  cells: observable,\r\n  lineCount: computed,\r\n});\r\n\r\nexport default Game;\r\n","export default interface Coords {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport function areCoordsEqual(a: Coords, b: Coords) {\r\n  return a.x === b.x && a.y === b.y;\r\n}\r\n","import React, { CSSProperties } from \"react\";\r\nimport Coords from \"../classes/Coords\";\r\nimport {\r\n  initialCellCoords,\r\n  getClassNamesForLineDirections,\r\n} from \"../classes/utils\";\r\nimport { CELL_SIZE } from \"../classes/constants\";\r\nimport { decorate, observe, autorun } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport Game from \"../classes/Game\";\r\nimport { Direction } from \"../classes/Direction\";\r\n\r\nfunction isCellSelected(props: CellProps): boolean {\r\n  const selectedCellCoords = props.game?.selectedCellCoords;\r\n  return (\r\n    selectedCellCoords?.x === props.coords.x &&\r\n    selectedCellCoords?.y === props.coords.y\r\n  );\r\n}\r\nconst makeStyle = (\r\n  isSelected: Boolean,\r\n  isOpened: Boolean,\r\n  isHighlighted: Boolean,\r\n  isEndOfLine: Boolean\r\n): CSSProperties => {\r\n  return {\r\n    width: CELL_SIZE,\r\n    height: CELL_SIZE,\r\n    fontSize: isOpened || isSelected ? 14 : 12,\r\n    textAlign: \"center\",\r\n    backgroundColor: isEndOfLine\r\n      ? \"rgb(90, 190, 150)\"\r\n      : isSelected && !isHighlighted\r\n      ? \"red\"\r\n      : isSelected && isHighlighted\r\n      ? \"rgb(103, 230, 123)\"\r\n      : isHighlighted\r\n      ? \"rgb(90, 190, 150)\"\r\n      : \"#f9f9f9\",\r\n  };\r\n};\r\n\r\nexport const Cell = observer((props: CellProps) => {\r\n  const { x, y } = props.coords;\r\n  const cell = props.game.cellAt(x, y);\r\n  const isHighlighted = props.game.highlightedCoords.some(\r\n    (c) => c.x === x && c.y === y\r\n  );\r\n  const isEndOfLine =\r\n    isHighlighted &&\r\n    props.game.endOfLineCoords.some((c) => c.x === x && c.y === y);\r\n  return (\r\n    <td\r\n      className={`noselect cell ${getClassNamesForLineDirections(\r\n        cell!.lineDirections\r\n      )}`}\r\n      style={makeStyle(\r\n        isCellSelected(props),\r\n        cell!.isOpened,\r\n        isHighlighted,\r\n        isEndOfLine\r\n      )}\r\n      onClick={() => {\r\n        if (\r\n          props.game.selectedCellCoords?.x === x &&\r\n          props.game.selectedCellCoords?.y === y\r\n        ) {\r\n          props.game.selectedCellCoords = undefined;\r\n        } else {\r\n          if (isHighlighted) props.game.tryCompleteLine(props.coords);\r\n          else props.game.selectedCellCoords = props.coords;\r\n        }\r\n      }}\r\n      data-coords={`[${x}, ${y}]`}\r\n    >\r\n      {cell!.isOpened || isCellSelected(props) ? <>&#9675;</> : <>&bull;</>}\r\n    </td>\r\n  );\r\n});\r\n\r\nexport interface CellProps {\r\n  coords: Coords;\r\n  game: Game;\r\n}\r\n","import React from \"react\";\r\nimport { CellProps, Cell } from \"./Cell\";\r\nimport Game from \"../classes/Game\";\r\nimport CellModel from \"../classes/CellModel\";\r\n\r\nexport const Row = (props: RowProps) => {\r\n  return (\r\n    <tr>\r\n      {props.cells.map((cell) => (\r\n        <Cell game={props.game} key={cell.coords.x} {...cell} />\r\n      ))}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport interface RowProps {\r\n  yIndex: number;\r\n  game: Game;\r\n  cells: Array<CellModel>;\r\n}\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport Game from \"../classes/Game\";\r\nimport Log, { decreaseLogLevel } from \"../classes/Log\";\r\nimport { newGame, saveGame, loadGame } from \"../App\";\r\n\r\nconst Menu = observer((props: { game: Game }) => {\r\n  return (\r\n    <thead>\r\n      <tr style={{ height: 40 }}>\r\n        <td colSpan={2}>Points:</td>\r\n        <td colSpan={2}>{props.game.lineCount}</td>\r\n        <td colSpan={3}>\r\n          <button onClick={() => decreaseLogLevel()}>\r\n            LogLevel-- ({Log.minLevel})\r\n          </button>\r\n        </td>\r\n        <td colSpan={2}>\r\n          <button onClick={() => loadGame()}>Load</button>\r\n        </td>\r\n        <td colSpan={2}>\r\n          <button onClick={() => saveGame()}>Save</button>\r\n        </td>\r\n        <td colSpan={5} style={{ textAlign: \"right\" }}>\r\n          <button onClick={() => newGame()}>New game</button>\r\n        </td>\r\n      </tr>\r\n      {/* <tr style={{ height: 10 }}>\r\n        <td colSpan={99} />\r\n      </tr> */}\r\n    </thead>\r\n  );\r\n});\r\n\r\nexport default Menu;\r\n","import React from \"react\";\nimport Game, { Line } from \"./classes/Game\";\nimport { Board } from \"./components/Board\";\nimport { decorate, observable } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport { LOCALSTORAGE_STATE_KEY } from \"./classes/constants\";\n\n/** Because React will not re-render by default if the 'game' object\n * changes, use MobX to strongly bind it.\n * */\nclass GameWrapper {\n  game: Game = new Game();\n}\ndecorate(GameWrapper, {\n  game: observable,\n});\nconst gameWrapper = new GameWrapper();\n\n/** Rendering root for React */\nconst App = observer(function () {\n  return <Board game={gameWrapper.game} />;\n});\n\n/** Starts a new game\n * TODO: Maybe this should save the new game into Local?\n * TODO: Maybe this should end the previous game and display score/end?\n */\nexport function newGame(): void {\n  gameWrapper.game = new Game();\n}\n\n/** Save the current line state to Local.\n * Only the lines matter. The game has no other saveable states.\n */\nexport function saveGame(): void {\n  const linesJson = JSON.stringify(gameWrapper.game.lines);\n  localStorage.setItem(LOCALSTORAGE_STATE_KEY, linesJson);\n}\n\n/** @returns Promise. Resolved true if a game was loaded successfully - false if not. */\nexport async function loadGame(): Promise<Boolean> {\n  // Load the saved state from local\n  const linesJson = localStorage.getItem(LOCALSTORAGE_STATE_KEY);\n  if (!!linesJson) {\n    // Try-catch could be replaced by a versioning system. CBA.\n    try {\n      const lines = JSON.parse(linesJson) as Line[];\n      gameWrapper.game = new Game();\n      // Delete all previous lines\n      gameWrapper.game.lines.splice(0, gameWrapper.game.lines.length);\n      // Add the saved lines to the game\n      lines.forEach((l) => {\n        l = new Line(l.coords); // Copy object, otherwise the getter for Direction will not work.\n        gameWrapper.game.lines.push(l);\n      });\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  return false;\n}\n\nexport default App;\n","import React, { CSSProperties } from \"react\";\r\nimport Game from \"../classes/Game\";\r\nimport { initialGameGrid } from \"../classes/utils\";\r\nimport { Cell } from \"./Cell\";\r\nimport { BOARD_MATRIX_SIZE, CELL_SIZE } from \"../classes/constants\";\r\nimport { Row } from \"./Row\";\r\nimport { autorun } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport Menu from \"./Menu\";\r\n\r\nconst style: CSSProperties = {\r\n  width: BOARD_MATRIX_SIZE * CELL_SIZE,\r\n  margin: \"auto\",\r\n};\r\n\r\nexport const Board = observer((props: { game: Game }) => {\r\n  const { game } = props;\r\n  React.useEffect(() => {\r\n    autorun(() => {\r\n      console.debug(\"highlightedCoords: \", game.highlightedCoords);\r\n    });\r\n  }, [game]);\r\n  return (\r\n    <table cellSpacing={0} style={style}>\r\n      <Menu game={game} />\r\n      <tbody>\r\n        {game.rows.map((row) => (\r\n          <Row game={game} key={row.yIndex} {...row} />\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./reset.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}