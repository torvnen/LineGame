{"version":3,"sources":["classes/Direction.ts","classes/constants.ts","classes/Log.ts","classes/utils.ts","classes/Cell.ts","components/LineComponent.tsx","classes/Line.ts","classes/Game.ts","classes/Coords.ts","components/CellComponent.tsx","components/Row.tsx","components/Menu.tsx","App.tsx","components/LineOverlay.tsx","hooks/useWindowSize.ts","components/Board.tsx","serviceWorker.ts","index.tsx"],"names":["Direction","dissectDirection","d","isRight","Right","isLeft","Left","isDown","Down","isUp","Up","isDiagonal","isHorizontal","isVertical","directionToString","dir","coordsToString","c","coordToString","x","y","Array","isArray","map","join","LogLevel","log","MIN_LEVEL","Debug","label","console","groupCollapsed","groupEnd","message","this","Verbose","optionalParams","debug","None","Info","info","Warning","warn","error","setLogLevel","level","initialCellCoords","coords","directions","concat","fill","forEach","push","isRtl","isLtr","isUtd","isDtu","getAngleForDirection","dd","NaN","directionsOverlap","d1","d2","dir1","dir2","getNextCoords","direction","sumUntilNotZero","a","sumToAdd","grid","xs","ys","startX","Math","min","endX","max","startY","endY","i","j","some","Cell","isOpened","tdRef","lineDirections","prototype","toString","decorate","observable","LineComponent","observer","props","game","model","dimensions","lines","style","left","offsetX","width","lengthPx","height","top","offsetY","transformOrigin","transform","rotationDeg","position","animationName","opacity","animationDuration","animationTimingFunction","background","LineModel","firstCell","lastCell","c1","c2","getDirectionForCoords","cellAt","length","undefined","firstTd","current","lastTd","cellWidth","offsetWidth","cellHeight","offsetHeight","offsetTop","LINE_THICKNESS","abs","offsetLeft","Error","floor","sqrt","pow","ceil","computed","GameState","Game","selectedCellCoords","cells","initiateBoardAsync","then","previousLineCount","autorun","initiateBoard","cell","ld","getPossibleLines","l","reduce","prev","curr","rows","slice","sort","b","row","find","r","yIndex","coord","animDelayMs","Promise","setTimeout","ll","possibleLines","lineLength","unopenedCells","lineCoords","next","line","getLineForCoords","lineCount","w","origo","highlightedCoords","endOfLineCoords","isCellSelected","makeStyle","isSelected","isHighlighted","isEndOfLine","fontSize","textAlign","backgroundColor","CellComponent","React","useRef","useEffect","ref","className","onClick","tryCompleteLine","data-coords","Row","key","buttonStyle","minHeight","margin","Flexbox","display","children","Menu","flexDirection","padding","flexGrow","paddingBottom","loadGame","linesJson","JSON","stringify","gameWrapper","localStorage","setItem","saveGame","Log","minLevel","pop","LineOverlayComponent","tableRef","useState","setStyle","size","isClient","window","getSize","innerWidth","innerHeight","windowSize","setWindowSize","addEventListener","handleResize","removeEventListener","useWindowSize","clientHeight","pointerEvents","BOARD_MATRIX_SIZE","Board","cellSpacing","GameWrapper","getItem","parse","splice","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c25f4c1c.chunk.js","sourcesContent":["import Coords from \"./Coords\";\r\n\r\nexport enum Direction {\r\n  None = 0,\r\n  Right = 1 << 0,\r\n  Left = 1 << 1,\r\n  Down = 1 << 2,\r\n  Up = 1 << 3,\r\n}\r\n\r\nexport function dissectDirection(d: Direction) {\r\n  const [isRight, isLeft, isDown, isUp] = [\r\n    (d & Direction.Right) === Direction.Right,\r\n    (d & Direction.Left) === Direction.Left,\r\n    (d & Direction.Down) === Direction.Down,\r\n    (d & Direction.Up) === Direction.Up,\r\n  ];\r\n  return {\r\n    isRight,\r\n    isLeft,\r\n    isDown,\r\n    isUp,\r\n    isDiagonal: (isUp || isDown) && (isRight || isLeft),\r\n    isHorizontal: (isRight || isLeft) && !(isUp || isDown),\r\n    isVertical: (isUp || isDown) && !(isRight || isLeft),\r\n  };\r\n}\r\n\r\nexport function directionToString(d: Direction) {\r\n  const dir = dissectDirection(d);\r\n  return (\r\n    (dir.isUp ? \"up\" : \"\") +\r\n    (dir.isDown ? \"down\" : \"\") +\r\n    (dir.isRight ? \"right\" : \"\") +\r\n    (dir.isLeft ? \"left\" : \"\")\r\n  );\r\n}\r\n\r\nexport function coordsToString(c: Coords | Coords[]): String {\r\n  const coordToString = (c: Coords) => {\r\n    return `(${c.x}, ${c.y})`;\r\n  };\r\n  return Array.isArray(c)\r\n    ? `[${c.map(coordToString).join(\", \")}]`\r\n    : coordToString(c);\r\n}\r\n\r\nexport function allDirections(): Direction[] {\r\n  return [\r\n    Direction.Up,\r\n    Direction.Down,\r\n    Direction.Left,\r\n    Direction.Right,\r\n    Direction.Up | Direction.Left,\r\n    Direction.Up | Direction.Right,\r\n    Direction.Down | Direction.Left,\r\n    Direction.Down | Direction.Right,\r\n  ];\r\n}\r\n","export const BOARD_MATRIX_SIZE = 20;\r\nexport const CELL_SIZE = 24;\r\nexport const LOCALSTORAGE_STATE_KEY = \"game_lines\";\r\n","import { decorate, computed, observable } from \"mobx\";\r\n\r\nexport enum LogLevel {\r\n  None = 0,\r\n  Verbose,\r\n  Debug,\r\n  Info,\r\n  Warning,\r\n  Error,\r\n}\r\n\r\nclass Log {\r\n  MIN_LEVEL = LogLevel.Debug;\r\n\r\n  get minLevel(): String {\r\n    return LogLevel[this.MIN_LEVEL];\r\n  }\r\n  group(label: String) {\r\n    console.groupCollapsed(label);\r\n  }\r\n  groupEnd() {\r\n    console.groupEnd();\r\n  }\r\n  v(message?: any, ...optionalParams: any[]) {\r\n    if (this.MIN_LEVEL == LogLevel.Verbose) {\r\n      console.debug(message, ...optionalParams);\r\n    }\r\n  }\r\n  d(message?: any, ...optionalParams: any[]) {\r\n    if (this.MIN_LEVEL !== LogLevel.None && this.MIN_LEVEL <= LogLevel.Debug) {\r\n      console.debug(message, ...optionalParams);\r\n    }\r\n  }\r\n  i(message?: any, ...optionalParams: any[]) {\r\n    if (this.MIN_LEVEL !== LogLevel.None && this.MIN_LEVEL <= LogLevel.Info)\r\n      console.info(message, ...optionalParams);\r\n  }\r\n  w(message?: any, ...optionalParams: any[]) {\r\n    if (this.MIN_LEVEL !== LogLevel.None && this.MIN_LEVEL <= LogLevel.Warning)\r\n      console.warn(message, ...optionalParams);\r\n  }\r\n  e(message?: any, ...optionalParams: any[]) {\r\n    if (this.MIN_LEVEL !== LogLevel.None)\r\n      console.error(message, ...optionalParams);\r\n  }\r\n}\r\n\r\nconst log = new Log();\r\n\r\nexport function decreaseLogLevel() {\r\n  if (log.MIN_LEVEL - 1 === -1) log.MIN_LEVEL = LogLevel.Error;\r\n  else log.MIN_LEVEL--;\r\n}\r\n\r\nexport function setLogLevel(level: LogLevel) {\r\n  log.MIN_LEVEL = level;\r\n}\r\n\r\nexport default log;\r\n","import {\r\n  Direction,\r\n  dissectDirection,\r\n  coordsToString,\r\n  directionToString,\r\n} from \"./Direction\";\r\nimport Coords from \"./Coords\";\r\nimport { BOARD_MATRIX_SIZE } from \"./constants\";\r\nimport log from \"./Log\";\r\n\r\nexport const initialCellCoords: Array<Coords> = (() => {\r\n  const coords = Array<Coords>();\r\n  const directions: Array<Direction> = Array().concat(\r\n    Array(3).fill(Direction.Right),\r\n    Array(3).fill(Direction.Down),\r\n    Array(3).fill(Direction.Right),\r\n    Array(3).fill(Direction.Down),\r\n    Array(3).fill(Direction.Left),\r\n    Array(3).fill(Direction.Down),\r\n    Array(3).fill(Direction.Left),\r\n    Array(3).fill(Direction.Up),\r\n    Array(3).fill(Direction.Left),\r\n    Array(3).fill(Direction.Up),\r\n    Array(3).fill(Direction.Right),\r\n    Array(3).fill(Direction.Up)\r\n  );\r\n  let x = -2;\r\n  let y = -5;\r\n  directions.forEach((d) => {\r\n    coords.push({ x, y });\r\n    const {\r\n      isLeft: isRtl,\r\n      isRight: isLtr,\r\n      isDown: isUtd,\r\n      isUp: isDtu,\r\n    } = dissectDirection(d);\r\n    x = isLtr\r\n      ? x + 1 === 0\r\n        ? 1\r\n        : x + 1\r\n      : isRtl\r\n      ? x - 1 === 0\r\n        ? -1\r\n        : x - 1\r\n      : x;\r\n    y = isUtd\r\n      ? y + 1 === 0\r\n        ? 1\r\n        : y + 1\r\n      : isDtu\r\n      ? y - 1 === 0\r\n        ? -1\r\n        : y - 1\r\n      : y;\r\n  });\r\n  return coords;\r\n})();\r\n\r\nexport function getAngleForDirection(d: Direction): number {\r\n  const dd = dissectDirection(d);\r\n  return dd.isHorizontal && dd.isRight\r\n    ? 0\r\n    : dd.isRight && dd.isDown\r\n    ? 45\r\n    : dd.isVertical && dd.isDown\r\n    ? 90\r\n    : dd.isLeft && dd.isDown\r\n    ? 135\r\n    : dd.isHorizontal && dd.isLeft\r\n    ? 180\r\n    : dd.isLeft && dd.isUp\r\n    ? 225\r\n    : dd.isVertical && dd.isUp\r\n    ? 270\r\n    : dd.isRight && dd.isUp\r\n    ? 315\r\n    : NaN;\r\n}\r\n\r\nexport function getDirectionForCoords(c1: Coords, c2: Coords) {\r\n  let d = Direction.None;\r\n  if (c1.x < c2.x) d |= Direction.Right;\r\n  else if (c1.x > c2.x) d |= Direction.Left;\r\n  if (c1.y < c2.y) d |= Direction.Up;\r\n  else if (c1.y > c2.y) d |= Direction.Down;\r\n  return d;\r\n}\r\n\r\nexport function directionsOverlap(d1: Direction, d2: Direction): boolean {\r\n  if (d1 === d2) return true;\r\n  const [dir1, dir2] = [dissectDirection(d1), dissectDirection(d2)];\r\n  // Vertical line\r\n  return dir1.isVertical && dir2.isVertical // Vertical: \"|\"\r\n    ? true\r\n    : dir1.isHorizontal && dir2.isHorizontal // Horizontal: \"-\"\r\n    ? true\r\n    : dir1.isRight && dir1.isUp && dir2.isLeft && dir2.isDown // Diagonal 1: \"/\"\r\n    ? true\r\n    : dir2.isRight && dir2.isUp && dir1.isLeft && dir1.isDown // Diagonal 1 with reversed comparison\r\n    ? true\r\n    : dir1.isLeft && dir1.isUp && dir2.isRight && dir2.isDown // Diagonal 2: \"\\\"\r\n    ? true\r\n    : dir2.isLeft && dir2.isUp && dir1.isRight && dir1.isDown // Diagonal 2 with reversed comparison\r\n    ? true\r\n    : false;\r\n}\r\n\r\nexport function getClassNamesForLineDirections(\r\n  directions: Direction[]\r\n): String {\r\n  if (!Array.isArray(directions) || directions.length === 0) return \"\";\r\n  const a = Array<String>();\r\n  log.group(\"getClassNamesForLineDirections\");\r\n  for (const direction of directions) {\r\n    const d = dissectDirection(direction);\r\n    log.d(\r\n      \"Direction %s (%s): %s\",\r\n      direction,\r\n      directionToString(direction),\r\n      JSON.stringify(d)\r\n    );\r\n    if ((d.isUp && d.isRight) || (d.isDown && d.isLeft))\r\n      a.push(\"line-right-up\");\r\n    if ((d.isDown && d.isRight) || (d.isUp && d.isLeft))\r\n      a.push(\"line-right-down\");\r\n    if ((d.isUp || d.isDown) && !d.isRight && !d.isLeft)\r\n      a.push(\"line-vertical\");\r\n    if ((d.isRight || d.isLeft) && !d.isUp && !d.isDown)\r\n      a.push(\"line-horizontal\");\r\n  }\r\n  const s = a.join(\" \");\r\n  log.v(\r\n    `Directions [${directions\r\n      .map(directionToString)\r\n      .join(\", \")}] resulted in className=%s`,\r\n    s\r\n  );\r\n  log.groupEnd();\r\n\r\n  return s;\r\n}\r\n\r\nexport function getNextCoords(coords: Coords, direction: Direction): Coords {\r\n  const d = dissectDirection(direction);\r\n  let { x, y } = coords;\r\n  if (d.isUp) y = sumUntilNotZero(y, 1);\r\n  if (d.isDown) y = sumUntilNotZero(y, -1);\r\n  if (d.isRight) x = sumUntilNotZero(x, 1);\r\n  if (d.isLeft) x = sumUntilNotZero(x, -1);\r\n  // log.d(\r\n  //   \"Next coords from %s in direction %s is at %s\",\r\n  //   coordsToString(coords),\r\n  //   directionToString(direction),\r\n  //   coordsToString({ x, y })\r\n  // );\r\n  return { x, y };\r\n}\r\n\r\nexport function sumUntilNotZero(a: number, sumToAdd: number): number {\r\n  return a + sumToAdd === 0\r\n    ? sumUntilNotZero(a + sumToAdd, sumToAdd)\r\n    : a + sumToAdd;\r\n}\r\n\r\nexport const initialGameGrid = ((): Array<Coords> => {\r\n  const grid = [...initialCellCoords];\r\n  const padding = (BOARD_MATRIX_SIZE - 10) / 2;\r\n  const xs = grid.map(({ x, y }) => x);\r\n  const ys = grid.map(({ x, y }) => y);\r\n  const [startX, endX, startY, endY] = [\r\n    Math.min(...xs) - padding,\r\n    Math.max(...xs) + padding,\r\n    Math.min(...ys) - padding,\r\n    Math.max(...ys) + padding,\r\n  ];\r\n  console.debug(\r\n    \"Creating a matrix from [%o, %o] to [%o, %o]\",\r\n    startX,\r\n    startY,\r\n    endX,\r\n    endY\r\n  );\r\n  for (let i = startX; i < endX; i++)\r\n    for (let j = startY; j < endY; j++)\r\n      if (!grid.some(({ x, y }) => x === i && y === j))\r\n        grid.push({ x: i, y: j });\r\n  return grid;\r\n})();\r\n","import { decorate, observable } from \"mobx\";\r\nimport Coords from \"./Coords\";\r\nimport { Direction, coordsToString, directionToString } from \"./Direction\";\r\n\r\nclass Cell {\r\n  isOpened = false;\r\n  tdRef?: React.RefObject<HTMLTableCellElement>;\r\n  readonly lineDirections = Array<Direction>();\r\n  constructor(public readonly coords: Coords) {}\r\n}\r\n\r\nCell.prototype.toString = function (): string {\r\n  return `${this.isOpened ? \"Opened\" : \"Closed\"} cell ${coordsToString(\r\n    this.coords\r\n  )} (dir=${this.lineDirections.map((d) => directionToString(d)).join(\", \")})`;\r\n};\r\n\r\ndecorate(Cell, {\r\n  isOpened: observable,\r\n  lineDirections: observable,\r\n});\r\n\r\nexport default Cell;\r\n","import React, { CSSProperties } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport Game from \"../classes/Game\";\r\nimport { LineModel } from \"../classes/Line\";\r\n\r\nexport const LINE_THICKNESS = 3;\r\nconst LINE_OPACITY = 0.75;\r\nexport const LineComponent = observer((props: LineComponentProps) => {\r\n  const { game, model } = props;\r\n  const { lines } = game;\r\n  const { dimensions } = model;\r\n  return (\r\n    <div\r\n      style={{\r\n        left: dimensions.offsetX,\r\n        width: dimensions.lengthPx,\r\n        height: LINE_THICKNESS,\r\n        top: dimensions.offsetY,\r\n        transformOrigin: model.transformOrigin,\r\n        transform: `rotate(${dimensions.rotationDeg}deg)`,\r\n        position: \"absolute\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          animationName: \"grow\",\r\n          opacity: LINE_OPACITY,\r\n          animationDuration: \"1s\",\r\n          animationTimingFunction: \"cubiz-bezier(0, 20, 50, 90)\",\r\n          background: \"green\",\r\n          height: LINE_THICKNESS,\r\n        }}\r\n      ></div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport interface LineComponentProps {\r\n  model: LineModel;\r\n  game: Game;\r\n}\r\n","import { getDirectionForCoords, getAngleForDirection } from \"./utils\";\r\nimport Coords from \"./Coords\";\r\nimport { Direction, coordsToString, dissectDirection } from \"./Direction\";\r\nimport log from \"./Log\";\r\nimport Game from \"./Game\";\r\nimport Cell from \"./Cell\";\r\nimport { decorate, computed, observable } from \"mobx\";\r\nimport { LINE_THICKNESS } from \"../components/LineComponent\";\r\n\r\nclass LineModel {\r\n  get transformOrigin(): string | number | undefined {\r\n    const dd = dissectDirection(this.direction);\r\n    return dd.isDiagonal || dd.isHorizontal\r\n      ? `0 50%`\r\n      : dd.isVertical\r\n      ? `0 100%`\r\n      : undefined;\r\n  }\r\n  get dimensions(): {\r\n    offsetX: number;\r\n    offsetY: number;\r\n    lengthPx: number;\r\n    rotationDeg: number;\r\n  } {\r\n    const dd = dissectDirection(this.direction);\r\n    const firstTd = this.firstCell!.tdRef!.current!;\r\n    const lastTd = this.lastCell!.tdRef!.current!;\r\n    const cellWidth = firstTd.offsetWidth;\r\n    const cellHeight = firstTd.offsetHeight;\r\n\r\n    let [offsetX, offsetY, lengthPx] = [0, 0, 0];\r\n    if (dd.isHorizontal) {\r\n      offsetY = firstTd.offsetTop + cellHeight / 2 - LINE_THICKNESS / 2;\r\n      if (dd.isRight) {\r\n        lengthPx =\r\n          Math.abs(firstTd.offsetLeft - lastTd.offsetLeft) + 0.5 * cellWidth;\r\n        offsetX = firstTd.offsetLeft + 0.25 * cellWidth;\r\n      } else {\r\n        lengthPx =\r\n          Math.abs(lastTd.offsetLeft - firstTd.offsetLeft) + 0.5 * cellWidth;\r\n        offsetX = firstTd.offsetLeft + 0.75 * cellWidth;\r\n      }\r\n    } else if (dd.isVertical) {\r\n      offsetX =\r\n        firstTd.offsetLeft +\r\n        cellWidth / 2 +\r\n        LINE_THICKNESS / (dd.isUp ? 2 : -2);\r\n      offsetY = firstTd.offsetTop + cellHeight * (dd.isDown ? 0.2 : 0.8) - LINE_THICKNESS;\r\n      const endY = lastTd.offsetTop + cellHeight * (dd.isUp ? 0.2 : 0.8) - LINE_THICKNESS;\r\n      lengthPx = Math.abs(endY - offsetY);\r\n    } else if (dd.isDiagonal) {\r\n      const endX = lastTd.offsetLeft + (dd.isLeft ? 0 : cellWidth);\r\n      const endY = lastTd.offsetTop + (dd.isUp ? 0 : cellHeight);\r\n      offsetX = firstTd.offsetLeft + (dd.isRight ? 0 : cellWidth);\r\n      offsetY = firstTd.offsetTop + (dd.isDown ? 0 : cellHeight);\r\n      lengthPx = Math.floor(\r\n        Math.sqrt(\r\n          // Pythagoras\r\n          Math.pow(Math.floor(endX - offsetX), 2) +\r\n            Math.pow(Math.ceil(endY - offsetY), 2)\r\n        )\r\n      );\r\n    } else throw new Error(\"Invalid direction\");\r\n    return {\r\n      offsetX,\r\n      offsetY,\r\n      lengthPx,\r\n      rotationDeg: getAngleForDirection(this.direction),\r\n    };\r\n  }\r\n  direction: Direction;\r\n  firstCell: Cell;\r\n  lastCell: Cell;\r\n  constructor(public coords: Coords[], private game: Game) {\r\n    this.direction = getDirectionForCoords(coords[0], coords[1]);\r\n    this.firstCell = this.game.cellAt(this.coords[0].x, this.coords[0].y)!;\r\n    this.lastCell = this.game.cellAt(\r\n      this.coords[this.coords.length - 1].x,\r\n      this.coords[this.coords.length - 1].y\r\n    )!;\r\n  }\r\n}\r\n\r\ndecorate(LineModel, {\r\n  firstCell: observable,\r\n  lastCell: observable,\r\n  direction: observable,\r\n  dimensions: computed,\r\n  transformOrigin: computed,\r\n});\r\n\r\nexport { LineModel };\r\n","import {\r\n  initialCellCoords,\r\n  getNextCoords,\r\n  sumUntilNotZero,\r\n  directionsOverlap,\r\n} from \"./utils\";\r\nimport Coords, { areCoordsEqual as coordsAreEqual } from \"./Coords\";\r\nimport { RowProps } from \"../components/Row\";\r\nimport { decorate, observable, computed, autorun } from \"mobx\";\r\nimport { allDirections, coordsToString, directionToString } from \"./Direction\";\r\nimport Cell from \"./Cell\";\r\nimport log, { LogLevel, decreaseLogLevel, setLogLevel } from \"../classes/Log\";\r\nimport { LineModel } from \"./Line\";\r\nimport { loadGame } from \"../App\";\r\n\r\nclass Game {\r\n  static readonly origo = { x: 0, y: 0 };\r\n  readonly lines = Array<LineModel>();\r\n  selectedCellCoords: Coords | undefined;\r\n  readonly cells = Array<Cell>();\r\n  get highlightedCoords(): Array<Coords> {\r\n    if (!this.selectedCellCoords) return [];\r\n    else\r\n      return this.getPossibleLines(this.selectedCellCoords)\r\n        .map((l) => l.coords)\r\n        .reduce((prev, curr) => prev.concat(curr), []);\r\n  }\r\n  get lineCount(): number {\r\n    return this.lines?.length || 0;\r\n  }\r\n  get endOfLineCoords(): Array<Coords> {\r\n    if (!this.selectedCellCoords) return [];\r\n    else\r\n      return this.getPossibleLines(this.selectedCellCoords).map(\r\n        (l) => l.coords[l.coords.length - 1]\r\n      );\r\n  }\r\n  get rows() {\r\n    const rows = Array<RowProps>();\r\n    this.cells\r\n      .slice() // MobX\r\n      .sort((a, b) => a.coords.x - b.coords.x)\r\n      .slice()\r\n      .sort((a, b) => b.coords.y - a.coords.y) // Note: because Y axis decreases downwards, reverse this sorting.\r\n      .forEach((c) => {\r\n        const { y } = c.coords;\r\n        const row = rows.find((r) => r.yIndex === y);\r\n        if (!row) rows.push({ yIndex: y, cells: [c], game: this });\r\n        else row.cells.push(c);\r\n      });\r\n    return rows;\r\n  }\r\n  constructor() {\r\n    for (let y = 9; y >= -9; y = sumUntilNotZero(y, -1))\r\n      for (let x = -9; x <= 9; x = sumUntilNotZero(x, 1))\r\n        this.cells.push(new Cell({ x, y }));\r\n\r\n    this.initiateBoardAsync().then(() => {\r\n      let previousLineCount = 0;\r\n      autorun(() => {\r\n        // As {this.lines} is a MobX observable,\r\n        // * this will run each times the collection is updated.\r\n        if (previousLineCount > this.lines.length) {\r\n          // A line was deleted (Undo was requested)\r\n          // Close all dots\r\n          this.cells.forEach((c) => (c.isOpened = false));\r\n          // Re-open initial dots\r\n          this.initiateBoard();\r\n        }\r\n        this.lines.forEach(({ coords, direction }) => {\r\n          // Open each cell that has a line over them\r\n          coords.forEach(({ x, y }) => {\r\n            const cell = this.cellAt(x, y)!;\r\n            if (!cell.isOpened) cell.isOpened = true;\r\n            if (!cell.lineDirections.some((ld) => ld === direction)) {\r\n              cell.lineDirections.push(direction);\r\n              log.d(\r\n                \"Added direction (%o) to cell at %o\",\r\n                directionToString(direction),\r\n                coordsToString(cell!.coords)\r\n              );\r\n            }\r\n          });\r\n        });\r\n        previousLineCount = this.lines.length;\r\n      });\r\n    });\r\n  }\r\n  initiateBoard() {\r\n    for (const coord of initialCellCoords) {\r\n      this.cellAt(coord.x, coord.y)!.isOpened = true;\r\n    }\r\n  }\r\n  async initiateBoardAsync(animDelayMs: number = 8) {\r\n    for (const coord of initialCellCoords) {\r\n      await new Promise((r: any) =>\r\n        setTimeout(() => {\r\n          this.cellAt(coord.x, coord.y)!.isOpened = true;\r\n          r(true);\r\n        }, animDelayMs)\r\n      );\r\n    }\r\n  }\r\n  cellAt(x: number, y: number): Cell | undefined {\r\n    return this.cells.find((c) => c.coords.x === x && c.coords.y === y);\r\n  }\r\n  /**\r\n   * Get all lines that can be drawn from coords\r\n   * @param {Coords} coords The x and y positions of the cell (something within [-9...9])\r\n   */\r\n  getPossibleLines(coords: Coords): LineModel[] {\r\n    const ll = log.MIN_LEVEL;\r\n    if (ll < LogLevel.Info) setLogLevel(LogLevel.Info); // skip debug logs for a while\r\n    const possibleLines = Array<LineModel>();\r\n    for (const direction of allDirections()) {\r\n      let { x, y } = coords;\r\n      let lineLength = 0;\r\n      let unopenedCells = 0;\r\n      let lineCoords = Array<Coords>();\r\n      for (let i = 0; i < 5; i++) {\r\n        lineCoords.push({ x, y });\r\n        const cell = this.cellAt(x, y);\r\n        if (!cell?.isOpened) unopenedCells++;\r\n        if (\r\n          !cell?.lineDirections?.some(\r\n            (ld) => ld === direction || directionsOverlap(ld, direction)\r\n          )\r\n        ) {\r\n          lineLength++;\r\n        }\r\n\r\n        let next = getNextCoords({ x, y }, direction);\r\n        x = next.x;\r\n        y = next.y;\r\n      }\r\n      if (lineLength === 5 && unopenedCells <= 1) {\r\n        const l = new LineModel(lineCoords, this);\r\n        log.i(\r\n          \"Possible line from coords %s to direction %s: %s\",\r\n          coordsToString(coords),\r\n          directionToString(direction),\r\n          coordsToString(lineCoords)\r\n        );\r\n        possibleLines.push(l);\r\n      }\r\n    }\r\n    setLogLevel(ll);\r\n    return possibleLines;\r\n  }\r\n  tryCompleteLine(c2: Coords) {\r\n    const c1 = this.selectedCellCoords;\r\n    if (!c1) {\r\n      log.w(\"Could not complete line due to selected coords being falsy.\");\r\n      return;\r\n    } else {\r\n      log.i(\r\n        \"Attempting to complete line from %o to %o\",\r\n        coordsToString(c1),\r\n        coordsToString(c2)\r\n      );\r\n      const line = this.getLineForCoords(c1, c2)!;\r\n      for (const { x, y } of line.coords) {\r\n        const c = this.cellAt(x, y);\r\n        if (!c!.isOpened) {\r\n          c!.isOpened = true;\r\n          log.i(\"Opened cell at \", coordsToString(c!.coords));\r\n        }\r\n      }\r\n      this.lines.push(line);\r\n      log.d(\r\n        \"Added line at %s. Line count: %o.\",\r\n        coordsToString(line.coords),\r\n        this.lineCount\r\n      );\r\n      this.selectedCellCoords = undefined;\r\n      log.d(\"Reset selected cell coords.\");\r\n    }\r\n  }\r\n  getLineForCoords(c1: Coords, c2: Coords): LineModel | undefined {\r\n    return this.getPossibleLines(c1).find((l) =>\r\n      l.coords.some((c) => coordsAreEqual(c, c2))\r\n    );\r\n  }\r\n}\r\n\r\nexport enum GameState {\r\n  NotStarted = 0,\r\n  Started,\r\n  Finished,\r\n}\r\n\r\ndecorate(Game, {\r\n  selectedCellCoords: observable,\r\n  highlightedCoords: computed,\r\n  endOfLineCoords: computed,\r\n  lines: observable,\r\n  rows: computed,\r\n  cells: observable,\r\n  lineCount: computed,\r\n});\r\n\r\nexport default Game;\r\n","export default interface Coords {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport function areCoordsEqual(a: Coords, b: Coords) {\r\n  return a.x === b.x && a.y === b.y;\r\n}\r\n","import React, { CSSProperties } from \"react\";\r\nimport Coords from \"../classes/Coords\";\r\nimport {\r\n  initialCellCoords,\r\n  getClassNamesForLineDirections,\r\n} from \"../classes/utils\";\r\nimport { CELL_SIZE } from \"../classes/constants\";\r\nimport { decorate, observe, autorun } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport Game from \"../classes/Game\";\r\nimport { Direction } from \"../classes/Direction\";\r\n\r\nfunction isCellSelected(props: CellComponentProps): boolean {\r\n  const selectedCellCoords = props.game?.selectedCellCoords;\r\n  return (\r\n    selectedCellCoords?.x === props.coords.x &&\r\n    selectedCellCoords?.y === props.coords.y\r\n  );\r\n}\r\nconst makeStyle = (\r\n  isSelected: Boolean,\r\n  isOpened: Boolean,\r\n  isHighlighted: Boolean,\r\n  isEndOfLine: Boolean\r\n): CSSProperties => {\r\n  return {\r\n    width: CELL_SIZE,\r\n    height: CELL_SIZE,\r\n    fontSize: isOpened || isSelected ? 14 : 12,\r\n    textAlign: \"center\",\r\n    backgroundColor: isEndOfLine\r\n      ? \"rgb(90, 190, 150)\"\r\n      : isSelected && !isHighlighted\r\n      ? \"red\"\r\n      : isSelected && isHighlighted\r\n      ? \"rgb(103, 230, 123)\"\r\n      : isHighlighted\r\n      ? \"rgb(90, 190, 150)\"\r\n      : \"#f9f9f9\",\r\n  };\r\n};\r\n\r\nexport const CellComponent = observer((props: CellComponentProps) => {\r\n  const tdRef = React.useRef<HTMLTableCellElement>(null);\r\n  const { game, coords } = props;\r\n  const { x, y } = props.coords;\r\n  const cell = props.game.cellAt(x, y);\r\n  const isHighlighted = props.game.highlightedCoords.some(\r\n    (c) => c.x === x && c.y === y\r\n  );\r\n  const isEndOfLine =\r\n    isHighlighted && game.endOfLineCoords.some((c) => c.x === x && c.y === y);\r\n  React.useEffect(() => {\r\n    if (!!cell) cell.tdRef = tdRef;\r\n  }, [game, coords, x, y]);\r\n  return (\r\n    <td\r\n      ref={tdRef}\r\n      className={`noselect cell ${\r\n        \"TODO\" || getClassNamesForLineDirections(cell!.lineDirections)\r\n      }`}\r\n      style={makeStyle(\r\n        isCellSelected(props),\r\n        cell!.isOpened,\r\n        isHighlighted,\r\n        isEndOfLine\r\n      )}\r\n      onClick={() => {\r\n        if (\r\n          props.game.selectedCellCoords?.x === x &&\r\n          props.game.selectedCellCoords?.y === y\r\n        ) {\r\n          props.game.selectedCellCoords = undefined;\r\n        } else {\r\n          if (isHighlighted) props.game.tryCompleteLine(props.coords);\r\n          else props.game.selectedCellCoords = props.coords;\r\n        }\r\n      }}\r\n      data-coords={`[${x}, ${y}]`}\r\n    >\r\n      {cell!.isOpened || isCellSelected(props) ? <>&#9675;</> : <>&bull;</>}\r\n    </td>\r\n  );\r\n});\r\n\r\nexport interface CellComponentProps {\r\n  coords: Coords;\r\n  game: Game;\r\n}\r\n","import React from \"react\";\r\nimport { CellComponentProps, CellComponent } from \"./CellComponent\";\r\nimport Game from \"../classes/Game\";\r\nimport Cell from \"../classes/Cell\";\r\n\r\nexport const Row = (props: RowProps) => {\r\n  return (\r\n    <tr>\r\n      {props.cells.map((cell) => (\r\n        <CellComponent game={props.game} key={cell.coords.x} {...cell} />\r\n      ))}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport interface RowProps {\r\n  yIndex: number;\r\n  game: Game;\r\n  cells: Array<Cell>;\r\n}\r\n","import React, { HTMLProps } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport Game from \"../classes/Game\";\r\nimport Log, { decreaseLogLevel } from \"../classes/Log\";\r\nimport { newGame, saveGame, loadGame } from \"../App\";\r\n\r\nconst buttonStyle = { minHeight: 40, margin: \"10px 5px\" };\r\nconst Flexbox = (props: HTMLProps<HTMLDivElement>) => {\r\n  return (\r\n    <div {...props} style={{ display: \"flex\", ...props.style }}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\nconst Menu = observer((props: { game: Game }) => {\r\n  return (\r\n    <Flexbox\r\n      style={{\r\n        margin: \"auto\",\r\n        width: 480,\r\n        flexDirection: \"column\",\r\n        background: \"#eee\",\r\n      }}\r\n    >\r\n      <Flexbox style={{ padding: \"10px 25px 0 25px\" }}>\r\n        <Flexbox style={{ flexGrow: 1 }}>\r\n          <h1>Linegame</h1>\r\n        </Flexbox>\r\n        <Flexbox style={{ transform: \"rotateZ(180deg)\", paddingBottom: 13 }}>\r\n          <h1>Linegame</h1>\r\n        </Flexbox>\r\n      </Flexbox>\r\n      <Flexbox>\r\n        <Flexbox>\r\n          <button style={buttonStyle} onClick={() => loadGame()}>\r\n            Load\r\n          </button>\r\n        </Flexbox>\r\n        <Flexbox>\r\n          <button style={buttonStyle} onClick={() => saveGame()}>\r\n            Save\r\n          </button>\r\n        </Flexbox>\r\n        <Flexbox>\r\n          <button style={buttonStyle} onClick={() => newGame()}>\r\n            New game\r\n          </button>\r\n        </Flexbox>\r\n      </Flexbox>\r\n      <Flexbox style={{ paddingBottom: 20 }}>\r\n        <Flexbox style={{ flexGrow: 1 }}>\r\n          <button style={buttonStyle} onClick={() => decreaseLogLevel()}>\r\n            LogLevel-- ({Log.minLevel})\r\n          </button>\r\n        </Flexbox>\r\n        <Flexbox style={{ flexGrow: 1 }}>\r\n          <button style={buttonStyle} onClick={() => props.game.lines.pop()}>\r\n            Undo &laquo;\r\n          </button>\r\n        </Flexbox>\r\n        <Flexbox>\r\n          <button style={buttonStyle} onClick={() => loadGame()}>\r\n            How to Play\r\n          </button>\r\n        </Flexbox>\r\n      </Flexbox>\r\n      <Flexbox>Points: {props.game.lineCount}</Flexbox>\r\n    </Flexbox>\r\n  );\r\n});\r\n\r\nexport default Menu;\r\n","import React from \"react\";\r\nimport Game from \"./classes/Game\";\r\nimport { LineModel } from \"./classes/Line\";\r\nimport { Board } from \"./components/Board\";\r\nimport { decorate, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { LOCALSTORAGE_STATE_KEY } from \"./classes/constants\";\r\n\r\n/** Because React will not re-render by default if the 'game' object\r\n * changes, use MobX to strongly bind it.\r\n * */\r\nclass GameWrapper {\r\n  game: Game = new Game();\r\n}\r\ndecorate(GameWrapper, {\r\n  game: observable,\r\n});\r\nconst gameWrapper = new GameWrapper();\r\n\r\n/** Rendering root for React */\r\nconst App = observer(function () {\r\n  return <Board game={gameWrapper.game} />;\r\n});\r\n\r\n/** Starts a new game\r\n * TODO: Maybe this should save the new game into Local?\r\n * TODO: Maybe this should end the previous game and display score/end?\r\n */\r\nexport function newGame(): void {\r\n  gameWrapper.game = new Game();\r\n}\r\n\r\n/** Save the current line state to Local.\r\n * Only the lines matter. The game has no other saveable states.\r\n */\r\nexport function saveGame(): void {\r\n  const linesJson = JSON.stringify(gameWrapper.game.lines);\r\n  localStorage.setItem(LOCALSTORAGE_STATE_KEY, linesJson);\r\n}\r\n\r\n/** @returns Promise. Resolved true if a game was loaded successfully - false if not. */\r\nexport async function loadGame(): Promise<Boolean> {\r\n  // Load the saved state from local\r\n  const linesJson = localStorage.getItem(LOCALSTORAGE_STATE_KEY);\r\n  if (!!linesJson) {\r\n    // Try-catch could be replaced by a versioning system. CBA.\r\n    try {\r\n      const lines = JSON.parse(linesJson) as LineModel[];\r\n      // Delete all previous lines\r\n      gameWrapper.game.lines.splice(0, gameWrapper.game.lines.length);\r\n      gameWrapper.game = new Game();\r\n      // Add the saved lines to the game\r\n      lines.forEach((l) => {\r\n        l = new LineModel(l.coords, gameWrapper.game); // Copy object, otherwise the getter for Direction will not work.\r\n        gameWrapper.game.lines.push(l);\r\n      });\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport default App;\r\n","import React, { CSSProperties } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport Game from \"../classes/Game\";\r\nimport { LineModel } from \"../classes/Line\";\r\nimport { LineComponent } from \"./LineComponent\";\r\nimport { useWindowSize } from \"../hooks/useWindowSize\";\r\n\r\nexport const LineOverlayComponent = observer(\r\n  (props: LineOverlayComponentProps) => {\r\n    const { game, tableRef } = props;\r\n    const { lines } = game;\r\n    const [style, setStyle] = React.useState<CSSProperties>({});\r\n    const size = useWindowSize();\r\n    React.useEffect(() => {\r\n      setStyle({\r\n        width: tableRef?.current?.offsetWidth,\r\n        height: tableRef?.current?.clientHeight,\r\n        left: tableRef?.current?.offsetLeft,\r\n        top: tableRef?.current?.offsetTop,\r\n      });\r\n    }, [tableRef, tableRef.current, size]);\r\n    return (\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          background: \"rgba(45,91,0,0.15)\",\r\n          top: 0,\r\n          left: 0,\r\n          pointerEvents: \"none\",\r\n          ...style,\r\n        }}\r\n      >\r\n        {Array.isArray(lines) &&\r\n          lines.map((l, i) => (\r\n            <LineComponent key={`line-${i}`} model={l} game={game} />\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport interface LineOverlayComponentProps {\r\n  game: Game;\r\n  tableRef: React.RefObject<HTMLTableElement>;\r\n}\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport function useWindowSize() {\r\n  const isClient = typeof window === \"object\";\r\n\r\n  function getSize() {\r\n    return {\r\n      width: isClient ? window.innerWidth : undefined,\r\n\r\n      height: isClient ? window.innerHeight : undefined,\r\n    };\r\n  }\r\n\r\n  const [windowSize, setWindowSize] = useState(getSize);\r\n\r\n  useEffect(() => {\r\n    if (!isClient) {\r\n      return;\r\n    }\r\n\r\n    function handleResize() {\r\n      setWindowSize(getSize());\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return windowSize;\r\n}\r\n","import React, { CSSProperties } from \"react\";\r\nimport Game from \"../classes/Game\";\r\nimport { initialGameGrid } from \"../classes/utils\";\r\nimport { CellComponent } from \"./CellComponent\";\r\nimport { BOARD_MATRIX_SIZE, CELL_SIZE } from \"../classes/constants\";\r\nimport { Row } from \"./Row\";\r\nimport { autorun } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport Menu from \"./Menu\";\r\nimport { LineOverlayComponent } from \"./LineOverlay\";\r\n\r\nconst style: CSSProperties = {\r\n  width: BOARD_MATRIX_SIZE * CELL_SIZE,\r\n  margin: \"auto\",\r\n};\r\n\r\nexport const Board = observer((props: { game: Game }) => {\r\n  const { game } = props;\r\n  const tableRef = React.useRef<HTMLTableElement>(null);\r\n  React.useEffect(() => {\r\n    autorun(() => {\r\n      console.debug(\"highlightedCoords: \", game.highlightedCoords);\r\n    });\r\n  }, [game]);\r\n  return (\r\n    <div style={{ display: \"relative\" }}>\r\n      <Menu game={game} />\r\n      <table ref={tableRef} cellSpacing={1} style={style}>\r\n        <tbody>\r\n          {game.rows.map((row) => (\r\n            <Row game={game} key={row.yIndex} {...row} />\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <LineOverlayComponent game={game} tableRef={tableRef} />\r\n    </div>\r\n  );\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./reset.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}